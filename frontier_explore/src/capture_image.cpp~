#include <iostream>
#include <string.h>
#include <fstream>
#include <sstream>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include "image_transport/image_transport.h"
#include <ros/ros.h>
#include <boost/foreach.hpp>
#include <sensor_msgs/PointCloud2.h>
#include <time.h>
#include <sensor_msgs/image_encodings.h>	


using namespace std; 
//using namespace
namespace enc=sensor_msgs::image_encodings;

int k=0;
time_t rawtime;

void callback(const sensor_msgs::ImageConstPtr &msg)
{
	sensor_msgs::ImageConstPtr msg2;
	stringstream num;
	num<<k;
	time (&rawtime);
  	printf ("The current local time is:%d	 %s",k, ctime (&rawtime));
	
	cv_bridge::CvImagePtr cv_ptr;
    	try
      	{
    		cv_ptr = cv_bridge::toCvCopy(msg, enc::BGR8);
      	}
    	catch (cv_bridge::Exception& e)
      	{
    		ROS_ERROR("cv_bridge exception: %s", e.what());
    		return;
      	}

   	cv::Mat filtered_image; //(480,640,CV_32FC3);
   	cv::cvtColor(cv_ptr->image,filtered_image,CV_BGR2GRAY);
	string path = "/home/sud/Desktop/depth_image/"+num.str()+".jpg";
	
	cv::Mat (480,640,CV_16UC1);
	cout<<filtered_image;	
	
	k++;
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "image_raw");
	ros::NodeHandle nh;
	image_transport::ImageTransport it(nh);
    image_transport::Subscriber sub = it.subscribe("camera/depth/image_raw", 1, callback);
	
	ros::spin();
}
